<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105
<#= Using #>

namespace <#= Namespace #>
{
   public sealed class <#= ClassName #> : MemoryDatabaseBase
   {
<# foreach(var item in GenerationContexts) { #>
        public <#= item.ClassName #>Table <#= item.ClassName #>Table { get; private set; }
<# } #>

        public <#= ClassName #>(
<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
            <#= item.ClassName #>Table <#= item.ClassName #>Table<#= (i == GenerationContexts.Length - 1) ? "" : "," #>
<# } #>
        )
        {
<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
            this.<#= item.ClassName #>Table = <#= item.ClassName #>Table;
<# } #>
        }

        public <#= ClassName #>(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
<# foreach(var item in GenerationContexts) { #>
            this.<#= item.ClassName #>Table = ExtractTableData<<#= item.ClassName #>, <#= item.ClassName #>Table>(header, databaseBinary, options, xs => new <#= item.ClassName #>Table(xs));
<# } #>
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
<# foreach(var item in GenerationContexts) { #>
                () => this.<#= item.ClassName #>Table = ExtractTableData<<#= item.ClassName #>, <#= item.ClassName #>Table>(header, databaseBinary, options, xs => new <#= item.ClassName #>Table(xs)),
<# } #>
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public <#= PrefixClassName #>ImmutableBuilder ToImmutableBuilder()
        {
            return new <#= PrefixClassName #>ImmutableBuilder(this);
        }

        public <#= PrefixClassName #>DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new <#= PrefixClassName #>DatabaseBuilder();
<# foreach(var item in GenerationContexts) { #>
            builder.Append(this.<#= item.ClassName #>Table.GetRawDataUnsafe());
<# } #>
            return builder;
        }

        public <#= PrefixClassName #>DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new <#= PrefixClassName #>DatabaseBuilder(resolver);
<# foreach(var item in GenerationContexts) { #>
            builder.Append(this.<#= item.ClassName #>Table.GetRawDataUnsafe());
<# } #>
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
<# foreach(var item in GenerationContexts) { #>
                <#= item.ClassName #>Table,
<# } #>
            });

<# foreach(var item in GenerationContexts) { #>
            ((ITableUniqueValidate)<#= item.ClassName #>Table).ValidateUnique(result);
            ValidateTable(<#= item.ClassName #>Table.All, database, "<#= item.PrimaryKey.BuildPropertyTupleName() #>", <#= item.ClassName #>Table.PrimaryKeySelector, result);
<# } #>

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(<#= ClassName #> db, string tableName)
        {
            switch (tableName)
            {
<# foreach(var item in GenerationContexts) { #>
                case "<#= item.MemoryTableName #>":
                    return db.<#= item.ClassName #>Table;
<# } #>                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
<# foreach(var item in GenerationContexts) { #>
            dict.Add("<#= item.MemoryTableName #>", <#= Namespace #>.Tables.<#= item.ClassName #>Table.CreateMetaTable());
<# } #>

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}