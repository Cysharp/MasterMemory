<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105
<#= Using #>

namespace <#= Namespace #>
{
   public sealed class <#= ClassName #> : ImmutableBuilderBase
   {
        <#= PrefixClassName #>MemoryDatabase memory;

        public <#= ClassName #>(<#= PrefixClassName #>MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public <#= PrefixClassName #>MemoryDatabase Build()
        {
            return memory;
        }

<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
        public void ReplaceAll(System.Collections.Generic.IList<<#= item.ClassName #>> data)
        {
            var newData = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var table = new <#= item.ClassName #>Table(newData);
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item2 = GenerationContexts[j]; #>
                <#= (i == j) ? "table" : "memory." + item2.ClassName + "Table"  #><#= (j == GenerationContexts.Length - 1) ? "" : "," #>
<# } #>            
            );
        }

<# if(!item.PrimaryKey.IsNonUnique) { #>
        public void Remove<#= item.ClassName #>(<#= item.PrimaryKey.BuildTypeName() #>[] keys)
        {
            var data = RemoveCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), keys, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var newData = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var table = new <#= item.ClassName #>Table(newData);
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item2 = GenerationContexts[j]; #>
                <#= (i == j) ? "table" : "memory." + item2.ClassName + "Table"  #><#= (j == GenerationContexts.Length - 1) ? "" : "," #>
<# } #>            
            );
        }

        public void Diff(<#= item.ClassName #>[] addOrReplaceData)
        {
            var data = DiffCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), addOrReplaceData, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var newData = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var table = new <#= item.ClassName #>Table(newData);
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item2 = GenerationContexts[j]; #>
                <#= (i == j) ? "table" : "memory." + item2.ClassName + "Table"  #><#= (j == GenerationContexts.Length - 1) ? "" : "," #>
<# } #>            
            );
        }
<# } #>

<# } #>
    }
}