<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#= Using #>

namespace <#= Namespace #>.Tables
{
   public sealed partial class <#= GenerationContext.ClassName #>Table : TableBase<<#= GenerationContext.ClassName #>>
   {
        readonly Func<<#= GenerationContext.ClassName #>, <#= GenerationContext.PrimaryKey.BuildTypeName() #>> <#= GenerationContext.PrimaryKey.SelectorName #>;

<# for(var i = 0; i < GenerationContext.SecondaryKeys.Length; i++) { var item = GenerationContext.SecondaryKeys[i]; #>
        readonly <#= GenerationContext.ClassName #>[] <#= item.TableName #>;
        readonly Func<<#= GenerationContext.ClassName #>, <#= item.BuildTypeName() #>> <#= item.SelectorName #>;
<# } #>

        public <#= GenerationContext.ClassName #>Table(<#= GenerationContext.ClassName #>[] sortedData)
            : base(sortedData)
        {
            this.<#= GenerationContext.PrimaryKey.SelectorName #> = x => <#= GenerationContext.PrimaryKey.BuildKeyAccessor("x") #>;
<# for(var i = 0; i < GenerationContext.SecondaryKeys.Length; i++) { var item = GenerationContext.SecondaryKeys[i]; #>
            this.<#= item.SelectorName #> = x => <#= item.BuildKeyAccessor("x") #>;
            this.<#= item.TableName #> = CloneAndSortBy(this.secondaryIndex<#= item.IndexNo #>Selector, <#= item.BuildComparer() #>);
<# } #>
        }

<# for(var i = 0; i < GenerationContext.SecondaryKeys.Length; i++) { var item = GenerationContext.SecondaryKeys[i]; #>
        public RangeView<<#= GenerationContext.ClassName #>> SortBy<#= item.BuildMethodName() #> => new RangeView<<#= GenerationContext.ClassName #>>(<#= item.TableName #>, 0, <#= item.TableName #>.Length - 1, true);
<# } #>

<# foreach(var item in new KeyBase[] { GenerationContext.PrimaryKey }.Concat(GenerationContext.SecondaryKeys)) { #>
<# if(item.CanInlineBinarySearch) { #>
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public <#= item.BuildReturnTypeName(GenerationContext.ClassName) #> FindBy<#= item.BuildMethodName() #>(<#= item.BuildTypeName() #> key)
        {
            var lo = 0;
            var hi = data.Length - 1;
            while (lo <= hi)
            {
                var mid = (int)(((uint)hi + (uint)lo) >> 1);
                var selected = data[mid].<#= item.Properties[0].Name #>;
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
<# if(item.IsNonUnique) { #>
                if (found == 0) { return FindRangeBy<#= item.BuildMethodName() #>(lo, hi); }
<# } else { #>
                if (found == 0) { return data[mid]; }
<# } #>
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            return default;
        }
<# } else { #>
        public <#= item.BuildReturnTypeName(GenerationContext.ClassName) #> FindBy<#= item.BuildMethodName() #>(<#= item.BuildTypeName() #> key)
        {
            return <#= item.BuildFindPrefix() #>Core<#= !item.IsNonUnique && item.IsIntType ? "Int" : "" #>(<#= item.TableName #>, <#= item.SelectorName #>, <#= item.BuildComparer() #>, key);
        }
<# } #>

        public <#= item.BuildReturnTypeName(GenerationContext.ClassName) #> FindClosestBy<#= item.BuildMethodName() #>(<#= item.BuildTypeName() #> key, bool selectLower = true)
        {
            return <#= item.BuildFindPrefix() #>ClosestCore(<#= item.TableName #>, <#= item.SelectorName #>, <#= item.BuildComparer() #>, key, selectLower);
        }

        public RangeView<<#= GenerationContext.ClassName #>> FindRangeBy<#= item.BuildMethodName() #>(<#= item.BuildTypeName() #> min, <#= item.BuildTypeName() #> max, bool ascendant = true)
        {
            return <#= item.BuildFindPrefix() #>RangeCore(<#= item.TableName #>, <#= item.SelectorName #>, <#= item.BuildComparer() #>, min, max, ascendant);
        }

<# } #>
    }
}